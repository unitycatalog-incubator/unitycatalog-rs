// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudEvent {
    /// Identifies the event. Producers MUST ensure that source + id
    /// is unique for each distinct event. If a duplicate event is re-sent
    /// (e.g. due to a network error) it MAY have the same id. Consumers
    /// MAY assume that Events with identical source and id are duplicates.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Identifies the context in which an event happened. Often this will
    /// include information such as the type of the event source, the organization
    /// publishing the event or the process that produced the event. The exact syntax
    /// and semantics behind the data encoded in the URI is defined by the event producer.
    ///
    /// Producers MUST ensure that source + id is unique for each distinct event.
    ///
    /// An application MAY assign a unique source to each distinct producer,
    /// which makes it easy to produce unique IDs since no other producer will
    /// have the same source. The application MAY use UUIDs, URNs, DNS authorities
    /// or an application-specific scheme to create unique source identifiers.
    /// A source MAY include more than one producer. In that case the producers MUST
    /// collaborate to ensure that source + id is unique for each distinct event.
    #[prost(string, tag="2")]
    pub source: ::prost::alloc::string::String,
    /// The version of the CloudEvents specification which the event uses.
    /// This enables the interpretation of the context. Compliant event producers
    /// MUST use a value of 1.0 when referring to this version of the specification.
    ///
    /// Currently, this attribute will only have the 'major' and 'minor' version
    /// numbers included in it. This allows for 'patch' changes to the specification
    /// to be made without changing this property's value in the serialization.
    /// Note: for 'release candidate' releases a suffix might be used for testing purposes.
    #[prost(string, tag="3")]
    pub spec_version: ::prost::alloc::string::String,
    /// This attribute contains a value describing the type of event related to the
    /// originating occurrence. Often this attribute is used for routing, observability
    /// policy enforcement, etc. The format of this is producer defined and might
    /// include information such as the version of the type
    #[prost(string, tag="4")]
    pub r#type: ::prost::alloc::string::String,
    /// Optional & Extension Attributes
    #[prost(map="string, message", tag="5")]
    pub attributes: ::std::collections::HashMap<::prost::alloc::string::String, cloud_event::CloudEventAttributeValue>,
    /// Timestamp of when the occurrence happened. If the time of the
    /// occurrence cannot be determined then this attribute MAY be set
    /// to some other time (such as the current time) by the CloudEvents
    /// producer, however all producers for the same source MUST be
    /// consistent in this respect. In other words, either they all use the
    /// actual time of the occurrence or they all use the same algorithm to
    /// determine the value used.
    #[prost(message, optional, tag="9")]
    pub time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// -- CloudEvent Data (Bytes, Text, or Proto)
    #[prost(oneof="cloud_event::Data", tags="6, 7, 8")]
    pub data: ::core::option::Option<cloud_event::Data>,
}
/// Nested message and enum types in `CloudEvent`.
pub mod cloud_event {
    /// *
    /// The CloudEvent specification defines
    /// seven attribute value types...
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CloudEventAttributeValue {
        #[prost(oneof="cloud_event_attribute_value::Attr", tags="1, 2, 3, 4, 5, 6, 7")]
        pub attr: ::core::option::Option<cloud_event_attribute_value::Attr>,
    }
    /// Nested message and enum types in `CloudEventAttributeValue`.
    pub mod cloud_event_attribute_value {
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Attr {
            #[prost(bool, tag="1")]
            CeBoolean(bool),
            #[prost(int32, tag="2")]
            CeInteger(i32),
            #[prost(string, tag="3")]
            CeString(::prost::alloc::string::String),
            #[prost(bytes, tag="4")]
            CeBytes(::prost::alloc::vec::Vec<u8>),
            #[prost(string, tag="5")]
            CeUri(::prost::alloc::string::String),
            #[prost(string, tag="6")]
            CeUriRef(::prost::alloc::string::String),
            #[prost(message, tag="7")]
            CeTimestamp(::pbjson_types::Timestamp),
        }
    }
    /// -- CloudEvent Data (Bytes, Text, or Proto)
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(bytes, tag="6")]
        BinaryData(::prost::alloc::vec::Vec<u8>),
        #[prost(string, tag="7")]
        TextData(::prost::alloc::string::String),
        #[prost(message, tag="8")]
        ProtoData(::pbjson_types::Any),
    }
}
/// *
/// CloudEvent Protobuf Batch Format
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudEventBatch {
    #[prost(message, repeated, tag="1")]
    pub events: ::prost::alloc::vec::Vec<CloudEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderStatus {
    /// The unique identifier for the order.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// The status of the order.
    #[prost(enumeration="Status", tag="2")]
    pub status: i32,
}
/// An order represents a customer's request to purchase one or more products.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    /// The unique identifier for the order.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// The unique identifier for the customer.
    #[prost(string, tag="2")]
    pub customer_id: ::prost::alloc::string::String,
    /// The line items in the order.
    #[prost(message, repeated, tag="3")]
    pub line_items: ::prost::alloc::vec::Vec<LineItem>,
}
/// A line item represents a single product in an order.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LineItem {
    /// The unique identifier for the line item.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// The unique identifier for the product.
    #[prost(string, tag="3")]
    pub product_id: ::prost::alloc::string::String,
    /// The quantity of the product in the line item.
    #[prost(int32, tag="4")]
    pub quantity: i32,
    /// The price of the product in the line item.
    #[prost(double, tag="5")]
    pub price: f64,
    /// The total price of the line item.
    #[prost(double, tag="6")]
    pub total_price: f64,
}
/// The status of an order.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    /// default status
    Unspecified = 0,
    /// status received
    Received = 1,
    /// status accepted
    Accepted = 2,
    /// status processing
    Processing = 3,
    /// status ready
    Ready = 4,
    /// status picked up
    PickedUp = 5,
    /// status delivered
    Delivered = 6,
    /// status cancelled
    Cancelled = 7,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::Unspecified => "STATUS_UNSPECIFIED",
            Status::Received => "STATUS_RECEIVED",
            Status::Accepted => "STATUS_ACCEPTED",
            Status::Processing => "STATUS_PROCESSING",
            Status::Ready => "STATUS_READY",
            Status::PickedUp => "STATUS_PICKED_UP",
            Status::Delivered => "STATUS_DELIVERED",
            Status::Cancelled => "STATUS_CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "STATUS_RECEIVED" => Some(Self::Received),
            "STATUS_ACCEPTED" => Some(Self::Accepted),
            "STATUS_PROCESSING" => Some(Self::Processing),
            "STATUS_READY" => Some(Self::Ready),
            "STATUS_PICKED_UP" => Some(Self::PickedUp),
            "STATUS_DELIVERED" => Some(Self::Delivered),
            "STATUS_CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
include!("caspers.messages.v1.serde.rs");
// @@protoc_insertion_point(module)