{
  "$defs": {
    "unitycatalog.sharing.v1.DeltaLogMessage.schema.json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "description": "Log message for Delta response.",
      "properties": {
        "metadata": {
          "$ref": "#/$defs/unitycatalog.sharing.v1.MetadatDelta.schema.json"
        },
        "protocol": {
          "$ref": "#/$defs/unitycatalog.sharing.v1.ProtocolDelta.schema.json"
        }
      },
      "title": "Delta Log Message",
      "type": "object"
    },
    "unitycatalog.sharing.v1.DeltaResponse.schema.json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "description": "Response for a query against a table in Delta format.",
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/$defs/unitycatalog.sharing.v1.DeltaLogMessage.schema.json"
          },
          "type": "array"
        }
      },
      "title": "Delta Response",
      "type": "object"
    },
    "unitycatalog.sharing.v1.Format.schema.json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "description": "File format for data files in a table",
      "properties": {
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map containing configuration options for the format",
          "propertyNames": {
            "type": "string"
          },
          "type": "object"
        },
        "provider": {
          "default": "",
          "description": "Name of the encoding for files in this table",
          "type": "string"
        }
      },
      "title": "Format",
      "type": "object"
    },
    "unitycatalog.sharing.v1.MetadatDelta.schema.json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "description": "Metadata for Delta response.",
      "patternProperties": {
        "^(deltaMetadata)$": {
          "$ref": "#/$defs/unitycatalog.sharing.v1.Metadata.schema.json",
          "description": "Metadata from Delta protocol"
        },
        "^(numFiles)$": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "description": "The number of files in the table, will be returned if available in the delta log."
        }
      },
      "properties": {
        "delta_metadata": {
          "$ref": "#/$defs/unitycatalog.sharing.v1.Metadata.schema.json",
          "description": "Metadata from Delta protocol"
        },
        "num_files": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "description": "The number of files in the table, will be returned if available in the delta log."
        },
        "size": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "description": "The size of the table in bytes, will be returned if available in the delta log."
        },
        "version": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "description": "The table version the metadata corresponds to, returned when querying\n table data with a version or timestamp parameter, or cdf query\n with includeHistoricalMetadata set to true."
        }
      },
      "title": "Metadat Delta",
      "type": "object"
    },
    "unitycatalog.sharing.v1.Metadata.schema.json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "description": "Metadata for a table",
      "patternProperties": {
        "^(createdTime)$": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "description": "The time when this metadata action is created, in milliseconds since the Unix epoch"
        },
        "^(partitionColumns)$": {
          "description": "An array containing the names of columns by which the data should be partitioned",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^(schemaString)$": {
          "default": "",
          "description": "Schema of the table",
          "type": "string"
        }
      },
      "properties": {
        "created_time": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "description": "The time when this metadata action is created, in milliseconds since the Unix epoch"
        },
        "description": {
          "description": "User-provided description for this table",
          "type": "string"
        },
        "format": {
          "$ref": "#/$defs/unitycatalog.sharing.v1.Format.schema.json",
          "description": "Specification of the encoding for the files stored in the table"
        },
        "id": {
          "default": "",
          "description": "Unique identifier for this table\n Validate GUID",
          "type": "string"
        },
        "name": {
          "description": "User-provided identifier for this table",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map containing configuration options for the metadata action",
          "propertyNames": {
            "type": "string"
          },
          "type": "object"
        },
        "partition_columns": {
          "description": "An array containing the names of columns by which the data should be partitioned",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "schema_string": {
          "default": "",
          "description": "Schema of the table",
          "type": "string"
        }
      },
      "title": "Metadata",
      "type": "object"
    },
    "unitycatalog.sharing.v1.ProtocolDelta.schema.json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "description": "Protocol for Delta response.",
      "patternProperties": {
        "^(minReaderVersion)$": {
          "anyOf": [
            {
              "maximum": 2147483647,
              "minimum": -2147483648,
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "default": 0,
          "description": "The minimum version of the protocol that a client must implement\n in order to correctly read a Delta Lake table."
        },
        "^(minWriterVersion)$": {
          "anyOf": [
            {
              "maximum": 2147483647,
              "minimum": -2147483648,
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "default": 0
        }
      },
      "properties": {
        "min_reader_version": {
          "anyOf": [
            {
              "maximum": 2147483647,
              "minimum": -2147483648,
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "default": 0,
          "description": "The minimum version of the protocol that a client must implement\n in order to correctly read a Delta Lake table."
        },
        "min_writer_version": {
          "anyOf": [
            {
              "maximum": 2147483647,
              "minimum": -2147483648,
              "type": "integer"
            },
            {
              "pattern": "^-?[0-9]+$",
              "type": "string"
            }
          ],
          "default": 0
        }
      },
      "title": "Protocol Delta",
      "type": "object"
    }
  },
  "$id": "unitycatalog.sharing.v1.DeltaResponse.schema.bundle.json",
  "$ref": "#/$defs/unitycatalog.sharing.v1.DeltaResponse.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema"
}
