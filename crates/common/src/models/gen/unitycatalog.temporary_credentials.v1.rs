// @generated
// This file is @generated by prost-build.
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AzureUserDelegationSas {
    /// The signed URI (SAS Token) used to access blob services for a given path
    #[prost(string, tag="1")]
    pub sas_token: ::prost::alloc::string::String,
}
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AzureAad {
    /// Opaque token that contains claims that you can use in Azure Active Directory to access cloud services.
    #[prost(string, tag="1")]
    pub aad_token: ::prost::alloc::string::String,
}
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct R2TemporaryCredentials {
    /// The access key ID that identifies the temporary credentials.
    #[prost(string, tag="1")]
    pub access_key_id: ::prost::alloc::string::String,
    /// The secret access key associated with the access key.
    #[prost(string, tag="2")]
    pub secret_access_key: ::prost::alloc::string::String,
    /// The generated JWT that users must pass to use the temporary credentials.
    #[prost(string, tag="3")]
    pub session_token: ::prost::alloc::string::String,
}
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GcpOauthToken {
    /// The OAuth token used to access Google Cloud services.
    #[prost(string, tag="1")]
    pub oauth_token: ::prost::alloc::string::String,
}
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AwsTemporaryCredentials {
    /// The access key ID that identifies the temporary credentials.
    #[prost(string, tag="1")]
    pub access_key_id: ::prost::alloc::string::String,
    /// The secret access key that can be used to sign AWS API requests.
    #[prost(string, tag="2")]
    pub secret_access_key: ::prost::alloc::string::String,
    /// The token that users must pass to AWS API to use the temporary credentials.
    #[prost(string, tag="3")]
    pub session_token: ::prost::alloc::string::String,
    /// The Amazon Resource Name (ARN) of the S3 access point for temporary credentials related the external location.
    #[prost(string, tag="4")]
    pub access_point: ::prost::alloc::string::String,
}
/// The response to the GenerateTemporaryTableCredentialsRequest.
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TemporaryCredential {
    /// Server time when the credential will expire, in epoch milliseconds.
    /// The API client is advised to cache the credential given this expiration time.
    #[prost(int64, tag="1")]
    pub expiration_time: i64,
    /// The URL of the storage path accessible by the temporary credential.
    #[prost(string, tag="2")]
    pub url: ::prost::alloc::string::String,
    /// The credentials to access the table.
    #[prost(oneof="temporary_credential::Credentials", tags="100, 101, 102, 103, 104")]
    pub credentials: ::core::option::Option<temporary_credential::Credentials>,
}
/// Nested message and enum types in `TemporaryCredential`.
pub mod temporary_credential {
    /// The credentials to access the table.
    #[cfg_attr(feature = "python", ::pyo3::pyclass)]
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Credentials {
        /// Credentials for Azure Blob Storage.
        #[prost(message, tag="100")]
        AzureUserDelegationSas(super::AzureUserDelegationSas),
        /// Credentials for Azure Active Directory.
        #[prost(message, tag="101")]
        AzureAad(super::AzureAad),
        /// Credentials for AWS S3.
        #[prost(message, tag="102")]
        AwsTempCredentials(super::AwsTemporaryCredentials),
        /// Credentials for Google Cloud Storage.
        #[prost(message, tag="103")]
        GcpOauthToken(super::GcpOauthToken),
        /// Credentials for R2.
        #[prost(message, tag="104")]
        R2TempCredentials(super::R2TemporaryCredentials),
    }
}
/// Gebnerate a new set of credentials for a table.
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateTemporaryTableCredentialsRequest {
    /// The name of the table for which to generate credentials.
    #[prost(string, tag="1")]
    pub table_id: ::prost::alloc::string::String,
    /// The operation to perform with the credentials.
    #[prost(enumeration="Operation", tag="2")]
    pub operation: i32,
}
/// Genearte a new set of credentials for a volume.
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateTemporaryVolumeCredentialsRequest {
    /// The name of the volume for which to generate credentials.
    #[prost(string, tag="1")]
    pub volume_id: ::prost::alloc::string::String,
    /// The operation to perform with the credentials.
    #[prost(enumeration="Operation", tag="2")]
    pub operation: i32,
}
/// The operation performed against the table data, either READ or READ_WRITE.
/// If READ_WRITE is specified, the credentials returned will have write permissions,
/// otherwise, it will be read only.
#[cfg_attr(feature = "python", ::pyo3::pyclass)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Operation {
    /// The operation is not specified.
    Unspecified = 0,
    /// The operation is read only.
    Read = 1,
    /// The operation is read and write.
    ReadWrite = 2,
}
impl Operation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Operation::Unspecified => "OPERATION_UNSPECIFIED",
            Operation::Read => "READ",
            Operation::ReadWrite => "READ_WRITE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OPERATION_UNSPECIFIED" => Some(Self::Unspecified),
            "READ" => Some(Self::Read),
            "READ_WRITE" => Some(Self::ReadWrite),
            _ => None,
        }
    }
}
include!("unitycatalog.temporary_credentials.v1.serde.rs");
// @@protoc_insertion_point(module)