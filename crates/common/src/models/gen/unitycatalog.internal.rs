// @generated
// This file is @generated by prost-build.
/// Dummy message to hold all resources.
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    #[prost(oneof = "resource::Resource", tags = "1, 4, 6, 7, 8, 9, 10, 11")]
    pub resource: ::core::option::Option<resource::Resource>,
}
/// Nested message and enum types in `Resource`.
pub mod resource {
    #[derive(::strum::EnumDiscriminants)]
    #[strum_discriminants(name(ObjectLabel))]
    #[strum_discriminants(
        derive(
            ::strum::AsRefStr,
            ::strum::Display,
            ::strum::EnumIter,
            ::strum::EnumString
        ),
        strum(serialize_all = "snake_case")
    )]
    #[strum_discriminants(derive(::serde::Serialize, ::serde::Deserialize, Hash))]
    #[strum_discriminants(serde(rename_all = "snake_case"))]
    #[strum_discriminants(strum(ascii_case_insensitive))]
    #[strum_discriminants(cfg_attr(feature = "sqlx", derive(::sqlx::Type)))]
    #[strum_discriminants(cfg_attr(
        feature = "sqlx",
        sqlx(type_name = "object_label", rename_all = "snake_case")
    ))]
    #[cfg_attr(feature = "python", ::pyo3::pyclass)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Resource {
        #[prost(message, tag = "1")]
        Share(super::super::shares::v1::Share),
        #[prost(message, tag = "4")]
        Credential(super::super::credentials::v1::Credential),
        #[prost(message, tag = "6")]
        CatalogInfo(super::super::catalogs::v1::CatalogInfo),
        #[prost(message, tag = "7")]
        SchemaInfo(super::super::schemas::v1::SchemaInfo),
        #[prost(message, tag = "8")]
        TableInfo(super::super::tables::v1::TableInfo),
        #[prost(message, tag = "9")]
        ColumnInfo(super::super::tables::v1::ColumnInfo),
        #[prost(message, tag = "10")]
        ExternalLocationInfo(super::super::external_locations::v1::ExternalLocationInfo),
        #[prost(message, tag = "11")]
        Recipient(super::super::recipients::v1::Recipient),
    }
}
include!("unitycatalog.internal.serde.rs");
// @@protoc_insertion_point(module)
