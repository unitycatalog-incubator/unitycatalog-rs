// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Annotations {
    #[prost(string, repeated, tag="1")]
    pub required: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Any {
    #[prost(message, optional, tag="1")]
    pub value: ::core::option::Option<::prost_types::Any>,
    #[prost(string, tag="2")]
    pub yaml: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Auth {
    #[prost(message, optional, tag="1")]
    pub oauth2: ::core::option::Option<Oauth2>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Document {
    #[prost(string, tag="1")]
    pub kind: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub discovery_version: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub revision: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag="9")]
    pub icons: ::core::option::Option<Icons>,
    #[prost(string, tag="10")]
    pub documentation_link: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="11")]
    pub labels: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="12")]
    pub protocol: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub base_url: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub base_path: ::prost::alloc::string::String,
    #[prost(string, tag="15")]
    pub root_url: ::prost::alloc::string::String,
    #[prost(string, tag="16")]
    pub service_path: ::prost::alloc::string::String,
    #[prost(string, tag="17")]
    pub batch_path: ::prost::alloc::string::String,
    #[prost(message, optional, tag="18")]
    pub parameters: ::core::option::Option<Parameters>,
    #[prost(message, optional, tag="19")]
    pub auth: ::core::option::Option<Auth>,
    #[prost(string, repeated, tag="20")]
    pub features: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="21")]
    pub schemas: ::core::option::Option<Schemas>,
    #[prost(message, optional, tag="22")]
    pub methods: ::core::option::Option<Methods>,
    #[prost(message, optional, tag="23")]
    pub resources: ::core::option::Option<Resources>,
    #[prost(string, tag="24")]
    pub etag: ::prost::alloc::string::String,
    #[prost(string, tag="25")]
    pub owner_domain: ::prost::alloc::string::String,
    #[prost(string, tag="26")]
    pub owner_name: ::prost::alloc::string::String,
    #[prost(bool, tag="27")]
    pub version_module: bool,
    #[prost(string, tag="28")]
    pub canonical_name: ::prost::alloc::string::String,
    #[prost(bool, tag="29")]
    pub fully_encode_reserved_expansion: bool,
    #[prost(string, tag="30")]
    pub package_path: ::prost::alloc::string::String,
    #[prost(string, tag="31")]
    pub mtls_root_url: ::prost::alloc::string::String,
}
/// Icons that represent the API.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icons {
    #[prost(string, tag="1")]
    pub x16: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub x32: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MediaUpload {
    #[prost(string, repeated, tag="1")]
    pub accept: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="2")]
    pub max_size: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub protocols: ::core::option::Option<Protocols>,
    #[prost(bool, tag="4")]
    pub supports_subscription: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Method {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub http_method: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag="5")]
    pub parameters: ::core::option::Option<Parameters>,
    #[prost(string, repeated, tag="6")]
    pub parameter_order: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="7")]
    pub request: ::core::option::Option<Request>,
    #[prost(message, optional, tag="8")]
    pub response: ::core::option::Option<Response>,
    #[prost(string, repeated, tag="9")]
    pub scopes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="10")]
    pub supports_media_download: bool,
    #[prost(bool, tag="11")]
    pub supports_media_upload: bool,
    #[prost(bool, tag="12")]
    pub use_media_download_service: bool,
    #[prost(message, optional, tag="13")]
    pub media_upload: ::core::option::Option<MediaUpload>,
    #[prost(bool, tag="14")]
    pub supports_subscription: bool,
    #[prost(string, tag="15")]
    pub flat_path: ::prost::alloc::string::String,
    #[prost(bool, tag="16")]
    pub etag_required: bool,
    #[prost(string, tag="17")]
    pub streaming_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Methods {
    #[prost(message, repeated, tag="1")]
    pub additional_properties: ::prost::alloc::vec::Vec<NamedMethod>,
}
/// Automatically-generated message used to represent maps of Method as ordered (name,value) pairs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamedMethod {
    /// Map key
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Mapped value
    #[prost(message, optional, tag="2")]
    pub value: ::core::option::Option<Method>,
}
/// Automatically-generated message used to represent maps of Parameter as ordered (name,value) pairs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamedParameter {
    /// Map key
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Mapped value
    #[prost(message, optional, tag="2")]
    pub value: ::core::option::Option<Parameter>,
}
/// Automatically-generated message used to represent maps of Resource as ordered (name,value) pairs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamedResource {
    /// Map key
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Mapped value
    #[prost(message, optional, tag="2")]
    pub value: ::core::option::Option<Resource>,
}
/// Automatically-generated message used to represent maps of Schema as ordered (name,value) pairs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamedSchema {
    /// Map key
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Mapped value
    #[prost(message, optional, tag="2")]
    pub value: ::core::option::Option<Schema>,
}
/// Automatically-generated message used to represent maps of Scope as ordered (name,value) pairs.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamedScope {
    /// Map key
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Mapped value
    #[prost(message, optional, tag="2")]
    pub value: ::core::option::Option<Scope>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oauth2 {
    #[prost(message, optional, tag="1")]
    pub scopes: ::core::option::Option<Scopes>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Parameter {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub r#ref: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub default: ::prost::alloc::string::String,
    #[prost(bool, tag="6")]
    pub required: bool,
    #[prost(string, tag="7")]
    pub format: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub pattern: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub minimum: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub maximum: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="11")]
    pub r#enum: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="12")]
    pub enum_descriptions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="13")]
    pub repeated: bool,
    #[prost(string, tag="14")]
    pub location: ::prost::alloc::string::String,
    #[prost(message, optional, tag="15")]
    pub properties: ::core::option::Option<Schemas>,
    #[prost(message, optional, tag="16")]
    pub additional_properties: ::core::option::Option<Schema>,
    #[prost(message, optional, tag="17")]
    pub items: ::core::option::Option<Schema>,
    #[prost(message, optional, tag="18")]
    pub annotations: ::core::option::Option<Annotations>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Parameters {
    #[prost(message, repeated, tag="1")]
    pub additional_properties: ::prost::alloc::vec::Vec<NamedParameter>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Protocols {
    #[prost(message, optional, tag="1")]
    pub simple: ::core::option::Option<Simple>,
    #[prost(message, optional, tag="2")]
    pub resumable: ::core::option::Option<Resumable>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(string, tag="1")]
    pub r#ref: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub parameter_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    #[prost(message, optional, tag="1")]
    pub methods: ::core::option::Option<Methods>,
    #[prost(message, optional, tag="2")]
    pub resources: ::core::option::Option<Resources>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resources {
    #[prost(message, repeated, tag="1")]
    pub additional_properties: ::prost::alloc::vec::Vec<NamedResource>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(string, tag="1")]
    pub r#ref: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resumable {
    #[prost(bool, tag="1")]
    pub multipart: bool,
    #[prost(string, tag="2")]
    pub path: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Schema {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub default: ::prost::alloc::string::String,
    #[prost(bool, tag="5")]
    pub required: bool,
    #[prost(string, tag="6")]
    pub format: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub pattern: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub minimum: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub maximum: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="10")]
    pub r#enum: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="11")]
    pub enum_descriptions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="12")]
    pub repeated: bool,
    #[prost(string, tag="13")]
    pub location: ::prost::alloc::string::String,
    #[prost(message, optional, tag="14")]
    pub properties: ::core::option::Option<Schemas>,
    #[prost(message, optional, boxed, tag="15")]
    pub additional_properties: ::core::option::Option<::prost::alloc::boxed::Box<Schema>>,
    #[prost(message, optional, boxed, tag="16")]
    pub items: ::core::option::Option<::prost::alloc::boxed::Box<Schema>>,
    #[prost(string, tag="17")]
    pub r#ref: ::prost::alloc::string::String,
    #[prost(message, optional, tag="18")]
    pub annotations: ::core::option::Option<Annotations>,
    #[prost(bool, tag="19")]
    pub read_only: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Schemas {
    #[prost(message, repeated, tag="1")]
    pub additional_properties: ::prost::alloc::vec::Vec<NamedSchema>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Scope {
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Scopes {
    #[prost(message, repeated, tag="1")]
    pub additional_properties: ::prost::alloc::vec::Vec<NamedScope>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Simple {
    #[prost(bool, tag="1")]
    pub multipart: bool,
    #[prost(string, tag="2")]
    pub path: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringArray {
    #[prost(string, repeated, tag="1")]
    pub value: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
// @@protoc_insertion_point(module)
