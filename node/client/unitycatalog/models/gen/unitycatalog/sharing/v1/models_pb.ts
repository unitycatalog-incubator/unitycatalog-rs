// @generated by protoc-gen-es v2.5.2 with parameter "target=ts,json_types=false"
// @generated from file unitycatalog/sharing/v1/models.proto (package unitycatalog.sharing.v1, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../google/api/resource_pb";

/**
 * Describes the file unitycatalog/sharing/v1/models.proto.
 */
export const file_unitycatalog_sharing_v1_models: GenFile =
  /*@__PURE__*/
  fileDesc(
    "CiR1bml0eWNhdGFsb2cvc2hhcmluZy92MS9tb2RlbHMucHJvdG8SF3VuaXR5Y2F0YWxvZy5zaGFyaW5nLnYxIj4KBVNoYXJlEhgKBG5hbWUYASABKAlCCuBBCLpIBHICEAESFAoCaWQYAiABKAlCA+BBA0gAiAEBQgUKA19pZCJJCg1TaGFyaW5nU2NoZW1hEgwKBG5hbWUYASABKAkSDQoFc2hhcmUYAiABKAkSFAoCaWQYAyABKAlCA+BBA0gAiAEBQgUKA19pZCL7AQoMU2hhcmluZ1RhYmxlEjcKBG5hbWUYASABKAlCKeBBCLpII3IhEAEY/wEyGl5bYS16XVswLTlhLXouX10qWzAtOWEtel0kEjUKBnNjaGVtYRgCIAEoCUIlukgiciAQARj/ATIZXlthLXpdWzAtOWEtel9dKlswLTlhLXpdJBI1CgVzaGFyZRgDIAEoCUImukgjciEQARj/ATIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQSFAoCaWQYBCABKAlCA+BBA0gAiAEBEhoKCHNoYXJlX2lkGAUgASgJQgPgQQNIAYgBAUIFCgNfaWRCCwoJX3NoYXJlX2lkIrICChFTaGFyaW5nU2NoZW1hSW5mbxIPCgJpZBgBIAEoCUID4EEDEhgKBG5hbWUYAiABKAlCCuBBCLpIBHICEAESEgoFc2hhcmUYAyABKAlCA+BBAxIaCghzaGFyZV9pZBgEIAEoCUID4EEDSACIAQESHQoLZGVzY3JpcHRpb24YBSABKAlCA+BBAUgBiAEBElMKCnByb3BlcnRpZXMYBiADKAsyOi51bml0eWNhdGFsb2cuc2hhcmluZy52MS5TaGFyaW5nU2NoZW1hSW5mby5Qcm9wZXJ0aWVzRW50cnlCA+BBARoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUILCglfc2hhcmVfaWRCDgoMX2Rlc2NyaXB0aW9uQvoBChtjb20udW5pdHljYXRhbG9nLnNoYXJpbmcudjFCC01vZGVsc1Byb3RvUAFaUGdpdGh1Yi5jb20vZGVsdGEtaW5jdWJhdG9yL2RlbHRhLXNoYXJpbmctcnMvZ28vdW5pdHljYXRhbG9nL3NoYXJpbmcvdjE7c2hhcmluZ3YxogIDVVNYqgIXVW5pdHljYXRhbG9nLlNoYXJpbmcuVjHKAhdVbml0eWNhdGFsb2dcU2hhcmluZ1xWMeICI1VuaXR5Y2F0YWxvZ1xTaGFyaW5nXFYxXEdQQk1ldGFkYXRh6gIZVW5pdHljYXRhbG9nOjpTaGFyaW5nOjpWMWIGcHJvdG8z",
    [
      file_buf_validate_validate,
      file_google_api_field_behavior,
      file_google_api_resource,
      file_google_protobuf_struct,
    ],
  );

/**
 * A share is a logical grouping to share with recipients. A share can be shared with one or multiple recipients.
 * A recipient can access all resources in a share. A share may contain multiple schemas.
 *
 * @generated from message unitycatalog.sharing.v1.Share
 */
export type Share = Message<"unitycatalog.sharing.v1.Share"> & {
  /**
   * Name of the share.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Unique identifier for the share.
   *
   * @generated from field: optional string id = 2;
   */
  id?: string;
};

/**
 * Describes the message unitycatalog.sharing.v1.Share.
 * Use `create(ShareSchema)` to create a new message.
 */
export const ShareSchema: GenMessage<Share> =
  /*@__PURE__*/
  messageDesc(file_unitycatalog_sharing_v1_models, 0);

/**
 * A schema is a logical grouping of tables. A schema may contain multiple tables.
 *
 * @generated from message unitycatalog.sharing.v1.SharingSchema
 */
export type SharingSchema = Message<"unitycatalog.sharing.v1.SharingSchema"> & {
  /**
   * The name of the schema
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The share name that the schema belongs to.
   *
   * @generated from field: string share = 2;
   */
  share: string;

  /**
   * Unique identifier for the schema.
   *
   * @generated from field: optional string id = 3;
   */
  id?: string;
};

/**
 * Describes the message unitycatalog.sharing.v1.SharingSchema.
 * Use `create(SharingSchemaSchema)` to create a new message.
 */
export const SharingSchemaSchema: GenMessage<SharingSchema> =
  /*@__PURE__*/
  messageDesc(file_unitycatalog_sharing_v1_models, 1);

/**
 * A table is a Delta Lake table or a view on top of a Delta Lake table.
 *
 * @generated from message unitycatalog.sharing.v1.SharingTable
 */
export type SharingTable = Message<"unitycatalog.sharing.v1.SharingTable"> & {
  /**
   * The name of the table.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The schema name that the table belongs to.
   *
   * @generated from field: string schema = 2;
   */
  schema: string;

  /**
   * The share name that the table belongs to.
   *
   * @generated from field: string share = 3;
   */
  share: string;

  /**
   * Unique identifier for the table.
   *
   * @generated from field: optional string id = 4;
   */
  id?: string;

  /**
   * A unique identifier for the share this table belongs to.
   *
   * @generated from field: optional string share_id = 5;
   */
  shareId?: string;
};

/**
 * Describes the message unitycatalog.sharing.v1.SharingTable.
 * Use `create(SharingTableSchema)` to create a new message.
 */
export const SharingTableSchema: GenMessage<SharingTable> =
  /*@__PURE__*/
  messageDesc(file_unitycatalog_sharing_v1_models, 2);

/**
 * A schema in a delta sharing service.
 *
 * A schema is a logical grouping of tables.
 * It may contain multiple tables.
 *
 * @generated from message unitycatalog.sharing.v1.SharingSchemaInfo
 */
export type SharingSchemaInfo =
  Message<"unitycatalog.sharing.v1.SharingSchemaInfo"> & {
    /**
     * Unique identifier for the schema.
     *
     * @generated from field: string id = 1;
     */
    id: string;

    /**
     * The name of the schema.
     *
     * @generated from field: string name = 2;
     */
    name: string;

    /**
     * The share name that the schema belongs to.
     *
     * @generated from field: string share = 3;
     */
    share: string;

    /**
     * The unique identifier for the share this schema belongs to.
     *
     * @generated from field: optional string share_id = 4;
     */
    shareId?: string;

    /**
     * User-provided free-form text description.
     *
     * @generated from field: optional string description = 5;
     */
    description?: string;

    /**
     * A map of key-value properties attached to the securable.
     *
     * @generated from field: map<string, string> properties = 6;
     */
    properties: { [key: string]: string };
  };

/**
 * Describes the message unitycatalog.sharing.v1.SharingSchemaInfo.
 * Use `create(SharingSchemaInfoSchema)` to create a new message.
 */
export const SharingSchemaInfoSchema: GenMessage<SharingSchemaInfo> =
  /*@__PURE__*/
  messageDesc(file_unitycatalog_sharing_v1_models, 3);
