// @generated by protoc-gen-es v2.5.2 with parameter "target=ts,json_types=false"
// @generated from file delta_sharing/v1/svc.proto (package delta_sharing.v1, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type {
  GenFile,
  GenMessage,
  GenService,
} from "@bufbuild/protobuf/codegenv2";
import {
  fileDesc,
  messageDesc,
  serviceDesc,
} from "@bufbuild/protobuf/codegenv2";
import {
  file_google_protobuf_empty,
  file_google_protobuf_struct,
} from "@bufbuild/protobuf/wkt";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import { file_gnostic_openapi_v3_annotations } from "../../gnostic/openapi/v3/annotations_pb";
import { file_google_api_annotations } from "../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../google/api/resource_pb";
import type {
  Share,
  ShareSchema,
  SharingSchema,
  SharingTable,
} from "./models_pb";
import { file_delta_sharing_v1_models } from "./models_pb";
import type {
  GetTableMetadataRequestSchema,
  GetTableVersionRequestSchema,
  GetTableVersionResponseSchema,
  JsonPredicate,
  QueryResponseSchema,
} from "./query_pb";
import { file_delta_sharing_v1_query } from "./query_pb";

/**
 * Describes the file delta_sharing/v1/svc.proto.
 */
export const file_delta_sharing_v1_svc: GenFile =
  /*@__PURE__*/
  fileDesc(
    "ChpkZWx0YV9zaGFyaW5nL3YxL3N2Yy5wcm90bxIQZGVsdGFfc2hhcmluZy52MSJ5ChFMaXN0U2hhcmVzUmVxdWVzdBInCgttYXhfcmVzdWx0cxgBIAEoBUIN4EEBukgHGgUQ6AcgAEgAiAEBEhwKCnBhZ2VfdG9rZW4YAiABKAlCA+BBAUgBiAEBQg4KDF9tYXhfcmVzdWx0c0INCgtfcGFnZV90b2tlbiJuChJMaXN0U2hhcmVzUmVzcG9uc2USJgoFaXRlbXMYASADKAsyFy5kZWx0YV9zaGFyaW5nLnYxLlNoYXJlEhwKD25leHRfcGFnZV90b2tlbhgCIAEoCUgAiAEBQhIKEF9uZXh0X3BhZ2VfdG9rZW4iRwoPR2V0U2hhcmVSZXF1ZXN0EjQKBG5hbWUYASABKAlCJuBBArpIIHIeEAEyGl5bYS16XVswLTlhLXouX10qWzAtOWEtel0kIrgBChlMaXN0U2hhcmluZ1NjaGVtYXNSZXF1ZXN0EjUKBXNoYXJlGAEgASgJQibgQQK6SCByHhABMhpeW2Etel1bMC05YS16Ll9dKlswLTlhLXpdJBInCgttYXhfcmVzdWx0cxgCIAEoBUIN4EEBukgHGgUQ6AcgAEgAiAEBEhwKCnBhZ2VfdG9rZW4YAyABKAlCA+BBAUgBiAEBQg4KDF9tYXhfcmVzdWx0c0INCgtfcGFnZV90b2tlbiJ+ChpMaXN0U2hhcmluZ1NjaGVtYXNSZXNwb25zZRIuCgVpdGVtcxgBIAMoCzIfLmRlbHRhX3NoYXJpbmcudjEuU2hhcmluZ1NjaGVtYRIcCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAlIAIgBAUISChBfbmV4dF9wYWdlX3Rva2VuIukBChdMaXN0U2NoZW1hVGFibGVzUmVxdWVzdBI0CgRuYW1lGAEgASgJQibgQQK6SCByHhABMhpeW2Etel1bMC05YS16Ll9dKlswLTlhLXpdJBI1CgVzaGFyZRgCIAEoCUIm4EECukggch4QATIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQSJAoLbWF4X3Jlc3VsdHMYAyABKAVCCuBBAbpIBBoCIABIAIgBARIcCgpwYWdlX3Rva2VuGAQgASgJQgPgQQFIAYgBAUIOCgxfbWF4X3Jlc3VsdHNCDQoLX3BhZ2VfdG9rZW4iewoYTGlzdFNjaGVtYVRhYmxlc1Jlc3BvbnNlEi0KBWl0ZW1zGAEgAygLMh4uZGVsdGFfc2hhcmluZy52MS5TaGFyaW5nVGFibGUSHAoPbmV4dF9wYWdlX3Rva2VuGAIgASgJSACIAQFCEgoQX25leHRfcGFnZV90b2tlbiK0AQoWTGlzdFNoYXJlVGFibGVzUmVxdWVzdBI0CgRuYW1lGAEgASgJQibgQQK6SCByHhABMhpeW2Etel1bMC05YS16Ll9dKlswLTlhLXpdJBInCgttYXhfcmVzdWx0cxgCIAEoBUIN4EEBukgHGgUQ6AcgAEgAiAEBEhwKCnBhZ2VfdG9rZW4YAyABKAlCA+BBAUgBiAEBQg4KDF9tYXhfcmVzdWx0c0INCgtfcGFnZV90b2tlbiK6BAoRUXVlcnlUYWJsZVJlcXVlc3QSNQoFc2hhcmUYASABKAlCJuBBArpIIHIeEAEyGl5bYS16XVswLTlhLXouX10qWzAtOWEtel0kEjYKBnNjaGVtYRgCIAEoCUIm4EECukggch4QATIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQSNAoEbmFtZRgDIAEoCUIm4EECukggch4QATIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQSHwoSc3RhcnRpbmdfdGltZXN0YW1wGAQgASgJSACIAQESFwoPcHJlZGljYXRlX2hpbnRzGAUgAygJEkIKFGpzb25fcHJlZGljYXRlX2hpbnRzGAYgASgLMh8uZGVsdGFfc2hhcmluZy52MS5Kc29uUHJlZGljYXRlSAGIAQESFwoKbGltaXRfaGludBgHIAEoBUgCiAEBEhQKB3ZlcnNpb24YCCABKANIA4gBARIWCgl0aW1lc3RhbXAYCSABKAlIBIgBARIdChBzdGFydGluZ192ZXJzaW9uGAogASgDSAWIAQESGwoOZW5kaW5nX3ZlcnNpb24YCyABKANIBogBAUIVChNfc3RhcnRpbmdfdGltZXN0YW1wQhcKFV9qc29uX3ByZWRpY2F0ZV9oaW50c0INCgtfbGltaXRfaGludEIKCghfdmVyc2lvbkIMCgpfdGltZXN0YW1wQhMKEV9zdGFydGluZ192ZXJzaW9uQhEKD19lbmRpbmdfdmVyc2lvbiJ6ChdMaXN0U2hhcmVUYWJsZXNSZXNwb25zZRItCgVpdGVtcxgBIAMoCzIeLmRlbHRhX3NoYXJpbmcudjEuU2hhcmluZ1RhYmxlEhwKD25leHRfcGFnZV90b2tlbhgCIAEoCUgAiAEBQhIKEF9uZXh0X3BhZ2VfdG9rZW4yiQoKDlNoYXJpbmdTZXJ2aWNlEncKCkxpc3RTaGFyZXMSIy5kZWx0YV9zaGFyaW5nLnYxLkxpc3RTaGFyZXNSZXF1ZXN0GiQuZGVsdGFfc2hhcmluZy52MS5MaXN0U2hhcmVzUmVzcG9uc2UiHrpHDCoKTGlzdFNoYXJlc4LT5JMCCRIHL3NoYXJlcxJrCghHZXRTaGFyZRIhLmRlbHRhX3NoYXJpbmcudjEuR2V0U2hhcmVSZXF1ZXN0GhcuZGVsdGFfc2hhcmluZy52MS5TaGFyZSIjukcKKghHZXRTaGFyZYLT5JMCEBIOL3NoYXJlcy97bmFtZX0SpwEKEkxpc3RTaGFyaW5nU2NoZW1hcxIrLmRlbHRhX3NoYXJpbmcudjEuTGlzdFNoYXJpbmdTY2hlbWFzUmVxdWVzdBosLmRlbHRhX3NoYXJpbmcudjEuTGlzdFNoYXJpbmdTY2hlbWFzUmVzcG9uc2UiNrpHFCoSTGlzdFNoYXJpbmdTY2hlbWFzgtPkkwIZEhcvc2hhcmVzL3tzaGFyZX0vc2NoZW1hcxKtAQoQTGlzdFNjaGVtYVRhYmxlcxIpLmRlbHRhX3NoYXJpbmcudjEuTGlzdFNjaGVtYVRhYmxlc1JlcXVlc3QaKi5kZWx0YV9zaGFyaW5nLnYxLkxpc3RTY2hlbWFUYWJsZXNSZXNwb25zZSJCukcSKhBMaXN0U2NoZW1hVGFibGVzgtPkkwInEiUvc2hhcmVzL3tzaGFyZX0vc2NoZW1hcy97bmFtZX0vdGFibGVzEp0BCg9MaXN0U2hhcmVUYWJsZXMSKC5kZWx0YV9zaGFyaW5nLnYxLkxpc3RTaGFyZVRhYmxlc1JlcXVlc3QaKS5kZWx0YV9zaGFyaW5nLnYxLkxpc3RTaGFyZVRhYmxlc1Jlc3BvbnNlIjW6RxEqD0xpc3RTaGFyZVRhYmxlc4LT5JMCGxIZL3NoYXJlcy97bmFtZX0vYWxsLXRhYmxlcxK6AQoPR2V0VGFibGVWZXJzaW9uEiguZGVsdGFfc2hhcmluZy52MS5HZXRUYWJsZVZlcnNpb25SZXF1ZXN0GikuZGVsdGFfc2hhcmluZy52MS5HZXRUYWJsZVZlcnNpb25SZXNwb25zZSJSukcRKg9HZXRUYWJsZVZlcnNpb26C0+STAjgSNi9zaGFyZXMve3NoYXJlfS9zY2hlbWFzL3tzY2hlbWF9L3RhYmxlcy97bmFtZX0vdmVyc2lvbhK0AQoQR2V0VGFibGVNZXRhZGF0YRIpLmRlbHRhX3NoYXJpbmcudjEuR2V0VGFibGVNZXRhZGF0YVJlcXVlc3QaHy5kZWx0YV9zaGFyaW5nLnYxLlF1ZXJ5UmVzcG9uc2UiVLpHEioQR2V0VGFibGVNZXRhZGF0YYLT5JMCORI3L3NoYXJlcy97c2hhcmV9L3NjaGVtYXMve3NjaGVtYX0vdGFibGVzL3tuYW1lfS9tZXRhZGF0YRKiAQoKUXVlcnlUYWJsZRIjLmRlbHRhX3NoYXJpbmcudjEuUXVlcnlUYWJsZVJlcXVlc3QaHy5kZWx0YV9zaGFyaW5nLnYxLlF1ZXJ5UmVzcG9uc2UiTrpHDCoKUXVlcnlUYWJsZYLT5JMCOToBKiI0L3NoYXJlcy97c2hhcmV9L3NjaGVtYXMve3NjaGVtYX0vdGFibGVzL3tuYW1lfS9xdWVyeUKeAgoUY29tLmRlbHRhX3NoYXJpbmcudjFCCFN2Y1Byb3RvUAGiAgNEWFiqAg9EZWx0YVNoYXJpbmcuVjHKAg9EZWx0YVNoYXJpbmdcVjHiAhtEZWx0YVNoYXJpbmdcVjFcR1BCTWV0YWRhdGHqAhBEZWx0YVNoYXJpbmc6OlYxukedARKEAQoRRGVsdGEgU2hhcmluZyBBUEkSKEFuIE9wZW4gUHJvdG9jb2wgZm9yIFNlY3VyZSBEYXRhIFNoYXJpbmcqPgoKQXBhY2hlIDIuMBIwaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5odG1sMgUxLjAuMBoUChJ7c2NoZW1lfTovL3tob3N0fS9iBnByb3RvMw",
    [
      file_buf_validate_validate,
      file_delta_sharing_v1_models,
      file_delta_sharing_v1_query,
      file_gnostic_openapi_v3_annotations,
      file_google_api_annotations,
      file_google_api_field_behavior,
      file_google_api_resource,
      file_google_protobuf_empty,
      file_google_protobuf_struct,
    ],
  );

/**
 * Request to list shares.
 *
 * @generated from message delta_sharing.v1.ListSharesRequest
 */
export type ListSharesRequest =
  Message<"delta_sharing.v1.ListSharesRequest"> & {
    /**
     * The maximum number of results per page that should be returned.
     *
     * @generated from field: optional int32 max_results = 1;
     */
    maxResults?: number;

    /**
     * Specifies a page token to use. Set pageToken to the nextPageToken returned
     * by a previous list request to get the next page of results.
     *
     * @generated from field: optional string page_token = 2;
     */
    pageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListSharesRequest.
 * Use `create(ListSharesRequestSchema)` to create a new message.
 */
export const ListSharesRequestSchema: GenMessage<ListSharesRequest> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 0);

/**
 * Response for ListSharesRequest.
 *
 * @generated from message delta_sharing.v1.ListSharesResponse
 */
export type ListSharesResponse =
  Message<"delta_sharing.v1.ListSharesResponse"> & {
    /**
     * The shares that were requested.
     *
     * @generated from field: repeated delta_sharing.v1.Share items = 1;
     */
    items: Share[];

    /**
     * Token that can be used to retrieve the next page of shares.
     * An empty or missing token means that no more shares are available for retrieval.
     *
     * @generated from field: optional string next_page_token = 2;
     */
    nextPageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListSharesResponse.
 * Use `create(ListSharesResponseSchema)` to create a new message.
 */
export const ListSharesResponseSchema: GenMessage<ListSharesResponse> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 1);

/**
 * Get a share by name.
 *
 * @generated from message delta_sharing.v1.GetShareRequest
 */
export type GetShareRequest = Message<"delta_sharing.v1.GetShareRequest"> & {
  /**
   * The share name to query. It's case-insensitive.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message delta_sharing.v1.GetShareRequest.
 * Use `create(GetShareRequestSchema)` to create a new message.
 */
export const GetShareRequestSchema: GenMessage<GetShareRequest> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 2);

/**
 * List schemas in a share.
 *
 * @generated from message delta_sharing.v1.ListSharingSchemasRequest
 */
export type ListSharingSchemasRequest =
  Message<"delta_sharing.v1.ListSharingSchemasRequest"> & {
    /**
     * The share name to query. It's case-insensitive.
     *
     * @generated from field: string share = 1;
     */
    share: string;

    /**
     * The maximum number of results per page that should be returned.
     *
     * @generated from field: optional int32 max_results = 2;
     */
    maxResults?: number;

    /**
     * Specifies a page token to use. Set pageToken to the nextPageToken returned
     * by a previous list request to get the next page of results.
     *
     * @generated from field: optional string page_token = 3;
     */
    pageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListSharingSchemasRequest.
 * Use `create(ListSharingSchemasRequestSchema)` to create a new message.
 */
export const ListSharingSchemasRequestSchema: GenMessage<ListSharingSchemasRequest> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 3);

/**
 * Response for ListSharingSchemasRequest.
 *
 * @generated from message delta_sharing.v1.ListSharingSchemasResponse
 */
export type ListSharingSchemasResponse =
  Message<"delta_sharing.v1.ListSharingSchemasResponse"> & {
    /**
     * The schemas that were requested.
     *
     * @generated from field: repeated delta_sharing.v1.SharingSchema items = 1;
     */
    items: SharingSchema[];

    /**
     * Token that can be used to retrieve the next page of schemas.
     * An empty or missing token means that no more schemas are available for retrieval.
     *
     * @generated from field: optional string next_page_token = 2;
     */
    nextPageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListSharingSchemasResponse.
 * Use `create(ListSharingSchemasResponseSchema)` to create a new message.
 */
export const ListSharingSchemasResponseSchema: GenMessage<ListSharingSchemasResponse> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 4);

/**
 * List tables in a schema.
 *
 * @generated from message delta_sharing.v1.ListSchemaTablesRequest
 */
export type ListSchemaTablesRequest =
  Message<"delta_sharing.v1.ListSchemaTablesRequest"> & {
    /**
     * The schema name to query. It's case-insensitive.
     *
     * @generated from field: string name = 1;
     */
    name: string;

    /**
     * The share name to query. It's case-insensitive.
     *
     * @generated from field: string share = 2;
     */
    share: string;

    /**
     * The maximum number of results per page that should be returned.
     *
     * @generated from field: optional int32 max_results = 3;
     */
    maxResults?: number;

    /**
     * Specifies a page token to use. Set pageToken to the nextPageToken returned
     * by a previous list request to get the next page of results.
     *
     * @generated from field: optional string page_token = 4;
     */
    pageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListSchemaTablesRequest.
 * Use `create(ListSchemaTablesRequestSchema)` to create a new message.
 */
export const ListSchemaTablesRequestSchema: GenMessage<ListSchemaTablesRequest> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 5);

/**
 * Response for ListSchemaTablesRequest.
 *
 * @generated from message delta_sharing.v1.ListSchemaTablesResponse
 */
export type ListSchemaTablesResponse =
  Message<"delta_sharing.v1.ListSchemaTablesResponse"> & {
    /**
     * The tables that were requested.
     *
     * @generated from field: repeated delta_sharing.v1.SharingTable items = 1;
     */
    items: SharingTable[];

    /**
     * Token that can be used to retrieve the next page of tables.
     * An empty or missing token means that no more tables are available for retrieval.
     *
     * @generated from field: optional string next_page_token = 2;
     */
    nextPageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListSchemaTablesResponse.
 * Use `create(ListSchemaTablesResponseSchema)` to create a new message.
 */
export const ListSchemaTablesResponseSchema: GenMessage<ListSchemaTablesResponse> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 6);

/**
 * List tables in a share.
 *
 * @generated from message delta_sharing.v1.ListShareTablesRequest
 */
export type ListShareTablesRequest =
  Message<"delta_sharing.v1.ListShareTablesRequest"> & {
    /**
     * The share name to query. It's case-insensitive.
     *
     * @generated from field: string name = 1;
     */
    name: string;

    /**
     * The maximum number of results per page that should be returned.
     *
     * @generated from field: optional int32 max_results = 2;
     */
    maxResults?: number;

    /**
     * Specifies a page token to use. Set pageToken to the nextPageToken returned
     * by a previous list request to get the next page of results.
     *
     * @generated from field: optional string page_token = 3;
     */
    pageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListShareTablesRequest.
 * Use `create(ListShareTablesRequestSchema)` to create a new message.
 */
export const ListShareTablesRequestSchema: GenMessage<ListShareTablesRequest> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 7);

/**
 * Request to query a table.
 *
 * @generated from message delta_sharing.v1.QueryTableRequest
 */
export type QueryTableRequest =
  Message<"delta_sharing.v1.QueryTableRequest"> & {
    /**
     * @generated from field: string share = 1;
     */
    share: string;

    /**
     * @generated from field: string schema = 2;
     */
    schema: string;

    /**
     * @generated from field: string name = 3;
     */
    name: string;

    /**
     * The starting timestamp to query from.
     *
     * @generated from field: optional string starting_timestamp = 4;
     */
    startingTimestamp?: string;

    /**
     * @generated from field: repeated string predicate_hints = 5;
     */
    predicateHints: string[];

    /**
     * The predicate to apply to the table.
     *
     * @generated from field: optional delta_sharing.v1.JsonPredicate json_predicate_hints = 6;
     */
    jsonPredicateHints?: JsonPredicate;

    /**
     * @generated from field: optional int32 limit_hint = 7;
     */
    limitHint?: number;

    /**
     * @generated from field: optional int64 version = 8;
     */
    version?: bigint;

    /**
     * @generated from field: optional string timestamp = 9;
     */
    timestamp?: string;

    /**
     * @generated from field: optional int64 starting_version = 10;
     */
    startingVersion?: bigint;

    /**
     * @generated from field: optional int64 ending_version = 11;
     */
    endingVersion?: bigint;
  };

/**
 * Describes the message delta_sharing.v1.QueryTableRequest.
 * Use `create(QueryTableRequestSchema)` to create a new message.
 */
export const QueryTableRequestSchema: GenMessage<QueryTableRequest> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 8);

/**
 * Response for ListShareTablesRequest.
 *
 * @generated from message delta_sharing.v1.ListShareTablesResponse
 */
export type ListShareTablesResponse =
  Message<"delta_sharing.v1.ListShareTablesResponse"> & {
    /**
     * The tables that were requested.
     *
     * @generated from field: repeated delta_sharing.v1.SharingTable items = 1;
     */
    items: SharingTable[];

    /**
     * Token that can be used to retrieve the next page of tables.
     * An empty or missing token means that no more tables are available for retrieval.
     *
     * @generated from field: optional string next_page_token = 2;
     */
    nextPageToken?: string;
  };

/**
 * Describes the message delta_sharing.v1.ListShareTablesResponse.
 * Use `create(ListShareTablesResponseSchema)` to create a new message.
 */
export const ListShareTablesResponseSchema: GenMessage<ListShareTablesResponse> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_svc, 9);

/**
 * Service exposing the official APIs for Delta Sharing.
 *
 * @generated from service delta_sharing.v1.SharingService
 */
export const SharingService: GenService<{
  /**
   * List shares accessible to a recipient.
   *
   * @generated from rpc delta_sharing.v1.SharingService.ListShares
   */
  listShares: {
    methodKind: "unary";
    input: typeof ListSharesRequestSchema;
    output: typeof ListSharesResponseSchema;
  };
  /**
   * Get the metadata for a specific share.
   *
   * @generated from rpc delta_sharing.v1.SharingService.GetShare
   */
  getShare: {
    methodKind: "unary";
    input: typeof GetShareRequestSchema;
    output: typeof ShareSchema;
  };
  /**
   * List the schemas in a share.
   *
   * @generated from rpc delta_sharing.v1.SharingService.ListSharingSchemas
   */
  listSharingSchemas: {
    methodKind: "unary";
    input: typeof ListSharingSchemasRequestSchema;
    output: typeof ListSharingSchemasResponseSchema;
  };
  /**
   * List the tables in a given share's schema.
   *
   * @generated from rpc delta_sharing.v1.SharingService.ListSchemaTables
   */
  listSchemaTables: {
    methodKind: "unary";
    input: typeof ListSchemaTablesRequestSchema;
    output: typeof ListSchemaTablesResponseSchema;
  };
  /**
   * List all the tables under all schemas in a share.
   *
   * @generated from rpc delta_sharing.v1.SharingService.ListShareTables
   */
  listShareTables: {
    methodKind: "unary";
    input: typeof ListShareTablesRequestSchema;
    output: typeof ListShareTablesResponseSchema;
  };
  /**
   * Get the current version for a table within a schema.
   *
   * @generated from rpc delta_sharing.v1.SharingService.GetTableVersion
   */
  getTableVersion: {
    methodKind: "unary";
    input: typeof GetTableVersionRequestSchema;
    output: typeof GetTableVersionResponseSchema;
  };
  /**
   * @generated from rpc delta_sharing.v1.SharingService.GetTableMetadata
   */
  getTableMetadata: {
    methodKind: "unary";
    input: typeof GetTableMetadataRequestSchema;
    output: typeof QueryResponseSchema;
  };
  /**
   * @generated from rpc delta_sharing.v1.SharingService.QueryTable
   */
  queryTable: {
    methodKind: "unary";
    input: typeof QueryTableRequestSchema;
    output: typeof QueryResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_delta_sharing_v1_svc, 0);
