// @generated by protoc-gen-es v2.5.2 with parameter "target=ts,json_types=false"
// @generated from file delta_sharing/v1/protocol.proto (package delta_sharing.v1, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";

/**
 * Describes the file delta_sharing/v1/protocol.proto.
 */
export const file_delta_sharing_v1_protocol: GenFile =
  /*@__PURE__*/
  fileDesc(
    "Ch9kZWx0YV9zaGFyaW5nL3YxL3Byb3RvY29sLnByb3RvEhBkZWx0YV9zaGFyaW5nLnYxIoIBCgZGb3JtYXQSEAoIcHJvdmlkZXIYASABKAkSNgoHb3B0aW9ucxgCIAMoCzIlLmRlbHRhX3NoYXJpbmcudjEuRm9ybWF0Lk9wdGlvbnNFbnRyeRouCgxPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLOAgoITWV0YWRhdGESCgoCaWQYASABKAkSEQoEbmFtZRgCIAEoCUgAiAEBEhgKC2Rlc2NyaXB0aW9uGAMgASgJSAGIAQESKAoGZm9ybWF0GAQgASgLMhguZGVsdGFfc2hhcmluZy52MS5Gb3JtYXQSFQoNc2NoZW1hX3N0cmluZxgFIAEoCRIZChFwYXJ0aXRpb25fY29sdW1ucxgGIAMoCRIZCgxjcmVhdGVkX3RpbWUYByABKANIAogBARI4CgdvcHRpb25zGAggAygLMicuZGVsdGFfc2hhcmluZy52MS5NZXRhZGF0YS5PcHRpb25zRW50cnkaLgoMT3B0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCBwoFX25hbWVCDgoMX2Rlc2NyaXB0aW9uQg8KDV9jcmVhdGVkX3RpbWVCggEKFGNvbS5kZWx0YV9zaGFyaW5nLnYxQg1Qcm90b2NvbFByb3RvUAGiAgNEWFiqAg9EZWx0YVNoYXJpbmcuVjHKAg9EZWx0YVNoYXJpbmdcVjHiAhtEZWx0YVNoYXJpbmdcVjFcR1BCTWV0YWRhdGHqAhBEZWx0YVNoYXJpbmc6OlYxYgZwcm90bzM",
    [file_buf_validate_validate],
  );

/**
 * File format for data files in a table
 *
 * @generated from message delta_sharing.v1.Format
 */
export type Format = Message<"delta_sharing.v1.Format"> & {
  /**
   * Name of the encoding for files in this table
   *
   * @generated from field: string provider = 1;
   */
  provider: string;

  /**
   * A map containing configuration options for the format
   *
   * @generated from field: map<string, string> options = 2;
   */
  options: { [key: string]: string };
};

/**
 * Describes the message delta_sharing.v1.Format.
 * Use `create(FormatSchema)` to create a new message.
 */
export const FormatSchema: GenMessage<Format> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_protocol, 0);

/**
 * Metadata for a table
 *
 * @generated from message delta_sharing.v1.Metadata
 */
export type Metadata = Message<"delta_sharing.v1.Metadata"> & {
  /**
   * Unique identifier for this table
   * Validate GUID
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User-provided identifier for this table
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * User-provided description for this table
   *
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * Specification of the encoding for the files stored in the table
   *
   * @generated from field: delta_sharing.v1.Format format = 4;
   */
  format?: Format;

  /**
   * Schema of the table
   *
   * @generated from field: string schema_string = 5;
   */
  schemaString: string;

  /**
   * An array containing the names of columns by which the data should be partitioned
   *
   * @generated from field: repeated string partition_columns = 6;
   */
  partitionColumns: string[];

  /**
   * The time when this metadata action is created, in milliseconds since the Unix epoch
   *
   * @generated from field: optional int64 created_time = 7;
   */
  createdTime?: bigint;

  /**
   * A map containing configuration options for the metadata action
   *
   * @generated from field: map<string, string> options = 8;
   */
  options: { [key: string]: string };
};

/**
 * Describes the message delta_sharing.v1.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export const MetadataSchema: GenMessage<Metadata> =
  /*@__PURE__*/
  messageDesc(file_delta_sharing_v1_protocol, 1);
