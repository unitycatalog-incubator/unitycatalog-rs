/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Timeout configuration for remote HTTP client. */
export interface TimeoutConfig {
  /**
   * The timeout for establishing a connection in seconds. Default is 120
   * seconds (2 minutes). This can also be set via the environment variable
   * `UC_CONNECT_TIMEOUT`, as an integer number of seconds.
   */
  connectTimeout?: number
  /**
   * The timeout for reading data from the server in seconds. Default is 300
   * seconds (5 minutes). This can also be set via the environment variable
   * `UC_READ_TIMEOUT`, as an integer number of seconds.
   */
  readTimeout?: number
  /**
   * The timeout for keeping idle connections in the connection pool in seconds.
   * Default is 300 seconds (5 minutes). This can also be set via the
   * environment variable `UC_CONNECTION_TIMEOUT`, as an integer
   * number of seconds.
   */
  poolIdleTimeout?: number
}
/** Retry configuration for the remote HTTP client. */
export interface RetryConfig {
  /**
   * The maximum number of retries for a request. Default is 3. You can also
   * set this via the environment variable `UC_MAX_RETRIES`.
   */
  retries?: number
  /**
   * The maximum number of retries for connection errors. Default is 3. You
   * can also set this via the environment variable `UC_CONNECT_RETRIES`.
   */
  connectRetries?: number
  /**
   * The maximum number of retries for read errors. Default is 3. You can also
   * set this via the environment variable `UC_READ_RETRIES`.
   */
  readRetries?: number
  /**
   * The backoff factor to apply between retries. Default is 0.25. Between each retry
   * the client will wait for the amount of seconds:
   * `{backoff factor} * (2 ** ({number of previous retries}))`. So for the default
   * of 0.25, the first retry will wait 0.25 seconds, the second retry will wait 0.5
   * seconds, the third retry will wait 1 second, etc.
   *
   * You can also set this via the environment variable
   * `UC_RETRY_BACKOFF_FACTOR`.
   */
  backoffFactor?: number
  /**
   * The jitter to apply to the backoff factor, in seconds. Default is 0.25.
   *
   * A random value between 0 and `backoff_jitter` will be added to the backoff
   * factor in seconds. So for the default of 0.25 seconds, between 0 and 250
   * milliseconds will be added to the sleep between each retry.
   *
   * You can also set this via the environment variable
   * `UC_RETRY_BACKOFF_JITTER`.
   */
  backoffJitter?: number
  /**
   * The HTTP status codes for which to retry the request. Default is
   * [429, 500, 502, 503].
   *
   * You can also set this via the environment variable
   * `UC_RETRY_STATUSES`. Use a comma-separated list of integers.
   */
  statuses?: Array<number>
}
export interface ClientConfig {
  userAgent?: string
  retryConfig?: RetryConfig
  timeoutConfig?: TimeoutConfig
  extraHeaders?: Record<string, string>
}
export declare class UnityCatalogClient {
  static fromUrl(baseUrl: string, token?: string | undefined | null): UnityCatalogClient
  listCatalogs(maxResults?: number | undefined | null): Promise<Array<Buffer>>
  catalog(name: string): CatalogClient
}
export declare class CatalogClient {
  get name(): string
  set name(name: string)
  schema(name: string): SchemaClient
  get(): Promise<Buffer>
  create(comment?: string | undefined | null, storageRoot?: string | undefined | null, providerName?: string | undefined | null, shareName?: string | undefined | null, properties?: Record<string, string> | undefined | null): Promise<Buffer>
  update(newName?: string | undefined | null, comment?: string | undefined | null, owner?: string | undefined | null, properties?: Record<string, string> | undefined | null): Promise<Buffer>
  /** Deletes the catalog. */
  delete(force?: boolean | undefined | null): Promise<void>
  listSchemas(maxResults?: number | undefined | null): Promise<Array<Buffer>>
}
export declare class SchemaClient {
  get name(): string
  set name(name: string)
  get catalogName(): string
  set catalogName(catalogName: string)
  get(): Promise<Buffer>
  create(comment?: string | undefined | null, properties?: Record<string, string> | undefined | null): Promise<Buffer>
  update(newName?: string | undefined | null, comment?: string | undefined | null, properties?: Record<string, string> | undefined | null): Promise<Buffer>
  delete(force?: boolean | undefined | null): Promise<void>
  listTables(maxResults?: number | undefined | null, includeDeltaMetadata?: boolean | undefined | null, omitColumns?: boolean | undefined | null, omitProperties?: boolean | undefined | null, omitUsername?: boolean | undefined | null): Promise<Array<Buffer>>
}
